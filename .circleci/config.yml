# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
jobs:
    build-packages:
        docker:
            - image: cimg/node:19.9.0
        working_directory: ~/helloworld
        steps:
            - checkout
            - restore_cache:
                  keys: [nodejs]
            - run:
                  name: install dependencies
                  command: |
                    npm install
            - run:
                  name: build packages
                  command: |
                    npm run build
            - run:
                  name: run test
                  command: |
                    npm run test
            - save_cache:
                  paths: [node_modules]
                  key: nodejs
    check-dockerfile-format:
        docker:
            # Use the same Docker base as the project
            - image: python:3.7.11-stretch

        working_directory: ~/lint
        steps:
            - checkout
            # Download and cache dependencies
            - restore_cache:
                  keys: [python-dependencies]

            - run:
                  name: install dependencies
                  command: |
                      python3 -m venv venv
                      . venv/bin/activate
                      # Install hadolint
                      wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 &&\
                      chmod +x /bin/hadolint
            - save_cache:
                  paths:
                      - ./venv
                  key: python-dependencies

            # run lint!
            - run:
                  name: run lint
                  command: |
                      . venv/bin/activate
                      hadolint Dockerfile
    create-scr:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                  name: Ensure back-end infrastructure exists
                  command: |
                      aws cloudformation deploy \
                        --template-file .circleci/files/ecr.yml \
                        --tags project=helloworld \
                        --stack-name "helloworld"
    build-docker-image:
        docker:
            - image: docker:18.06.3-ce-git
        working_directory: ~/helloworld
        steps:
            - checkout
            - run:
                name: build docker image
                command: |
                    docker build -t helloworld .
            - deploy:
                name: Push application Docker image
                command: |
                    account_id=$(aws sts get-caller-identity --query 'Account' --output text)
                    app_name=helloworld
                    repo=$(aws cloudformation --region us-east-1 describe-stacks --stack-name ${app_name} --query 'Stacks[0].Outputs[?OutputKey==`RepositoryUri`].OutputValue' --output text)
                    # Login ECR
                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${account_id}.dkr.ecr.us-east-1.amazonaws.com
                    # Add tags for that image
                    docker tag ${app_name}:latest ${account_id}.dkr.ecr.us-east-1.amazonaws.com/${app_name}:latest
                    # Push docker image to ECR
                    docker push ${account_id}.dkr.ecr.us-east-1.amazonaws.com/${app_name}:latest
            

workflows:
  default:
    jobs:
      - build-packages
      - check-dockerfile-format:
          requires: [build-packages]
      - create-scr
      - build-docker-image:
          requires: [create-scr, check-dockerfile-format]
    #   - scan-backend:
    #       requires: [build-backend]