# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
jobs:
  build-packages:
    docker:
      - image: cimg/node:19.9.0
    working_directory: ~/helloworld
    steps:
      - checkout
      - restore_cache:
          keys: [nodejs]
      - run:
          name: install dependencies
          command: |
            npm install
      - run:
          name: build packages
          command: |
            npm run build
      - run:
          name: run test
          command: |
            npm run test
      - save_cache:
          paths: [node_modules]
          key: nodejs
  check-dockerfile-format:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.11-stretch

    working_directory: ~/lint
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys: [python-dependencies]

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: python-dependencies

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            hadolint Dockerfile
  create-ecr:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/ecr.yml \
              --tags project=helloworld \
              --stack-name "helloworld"
  build-docker-image:
    docker:
      - image: docker:cli
    working_directory: ~/helloworld
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build docker image
          command: |
            apk update && apk add --no-cache wget aws-cli nodejs npm
            # wget https://nodejs.org/dist/v18.3.0/node-v18.3.0-linux-x64.tar.xz && tar -xf node-v18.3.0-linux-x64.tar.xz
            # apk add --update nodejs npm
            npm install
            npm run build
            docker build -t helloworld:<< parameters.workflow_id >> .
      - deploy:
          name: Push application Docker image
          command: |
            account_id=$(aws sts get-caller-identity --query 'Account' --output text)
            app_name=helloworld
            repo=$(aws cloudformation --region us-east-1 describe-stacks --stack-name ${app_name} --query 'Stacks[0].Outputs[?OutputKey==`RepositoryUri`].OutputValue' --output text)
            # Login ECR
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${account_id}.dkr.ecr.us-east-1.amazonaws.com
            # Add tags for that image
            docker tag ${app_name}:<< parameters.workflow_id >> ${account_id}.dkr.ecr.us-east-1.amazonaws.com/${app_name}:<< parameters.workflow_id >>
            # Push docker image to ECR
            docker push ${account_id}.dkr.ecr.us-east-1.amazonaws.com/${app_name}:<< parameters.workflow_id >>
  deploy-application:
    docker:
      - image: cimg/python:3.7-node
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - checkout
      - run:
          name: Install kubernetes
          command: |
              # Install awscli
              curl --silent "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip -qq awscliv2.zip && sudo ./aws/install
              # Install eksctl
              curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp && sudo mv /tmp/eksctl /usr/local/bin
              # Install and configure kubectl
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl && kubectl version --client
              # Install and configure kubectl aws-iam-authenticator
              curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.6.3/aws-iam-authenticator_0.6.3_linux_amd64 && chmod +x ./aws-iam-authenticator && mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
              # Check cluster is existing

      - deploy:
          name: Deploy application to EKS cluster
          command: |
              cd kubernetes
              # Get account name
              account_id=$(aws sts get-caller-identity --query 'Account' --output text)
              docker_image_name="${account_id}.dkr.ecr.us-east-1.amazonaws.com/helloworld"
              cat helloworld-deploy.yaml |\
                 sed "s|DOCKER_IMAGE_NAME|${docker_image_name}|\
                  g;s|VERSION_INFO_VALUE|<< parameters.workflow_id >>|g" > helloworld-deployment.yaml
              echo "helloworld-deployment:$(cat helloworld-deployment.yaml)"
              echo "workflow_id:<< parameters.workflow_id >>"
              
              eksctl create cluster -f eks-config.yml || eksctl upgrade cluster -f eks-config.yml --approve
              aws eks update-kubeconfig --name helloworld --region us-east-1
              
              # Run kubernetes deployment
              kubectl create -f helloworld-deployment.yaml || kubectl apply -f helloworld-deployment.yaml
              # Run kubernetes service
              kubectl create -f helloworld-service.yaml || kubectl apply -f helloworld-service.yaml
              
              kubectl get all
              kubectl get nodes
              kubectl rollout status deployment/helloworld-deploy
              kubectl rollout history deployment/helloworld-deploy
workflows:
  default:
    jobs:
      - build-packages
      - check-dockerfile-format:
          requires: [build-packages]
      - create-ecr
      - build-docker-image:
          requires: [create-ecr, check-dockerfile-format]
      - deploy-application:
          requires: [build-docker-image]